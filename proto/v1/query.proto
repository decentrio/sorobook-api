syntax = "proto3";
package v1;

import "google/api/annotations.proto";
import "v1/contract.proto";
import "v1/ledger.proto";
import "v1/event.proto";
import "v1/transaction.proto";

option go_package = "github.com/decentrio/sorobook-api/types";

service Query {
  // Ledger queries ledger info given ledger sequence.
  rpc Ledger(LedgerRequest) returns (LedgerResponse) {
    option (google.api.http).get = "/v1/ledger-by-seq/{seq}";
  }

  // LedgerHash queries ledger info given ledger hash.
  rpc LedgerHash(LedgerHashRequest) returns (LedgerHashResponse) {
    option (google.api.http).get = "/v1/ledger-by-hash/{hash}";
  }

  // Transaction queries transaction info given transaction hash.
  rpc Transaction(TransactionRequest) returns (TransactionResponse) {
    option (google.api.http).get = "/v1/transactions/{hash}";
  }

  // TransactionsByAddress queries all transactions that match the given source
  // address.
  rpc TransactionsByAddress(TransactionsByAddressRequest)
      returns (TransactionsByAddressResponse) {
    option (google.api.http).get =
        "/v1/transactions-by-address/{address}/{page}";
  }

  // TransactionsAtLedgerSeq queries all transactions that match the given
  // ledger sequence.
  rpc TransactionsAtLedgerSeq(TransactionsAtLedgerSeqRequest)
      returns (TransactionsAtLedgerSeqResponse) {
    option (google.api.http).get =
        "/v1/transactions-at-ledger-seq/{ledger}/{page}";
  }

  // TransactionsAtLedgerHash queries all transactions that match the given
  // ledger hash.
  rpc TransactionsAtLedgerHash(TransactionsAtLedgerHashRequest)
      returns (TransactionsAtLedgerHashResponse) {
    option (google.api.http).get =
        "/v1/transactions-at-ledger-hash/{ledger_hash}/{page}";
  }

  // ContractTransactions queries all transactions that match the given
  // contract id.
  rpc ContractTransactions(ContractTransactionsRequest)
      returns (ContractTransactionsResponse) {
    option (google.api.http).get =
        "/v1/transactions-by-contract/{contract}/{page}";
  }

  // UserContractTransactions queries all transactions that match the given
  // contract id and user address.
  rpc UserContractTransactions(UserContractTransactionsRequest)
      returns (UserContractTransactionsResponse) {
    option (google.api.http).get =
        "/v1/transactions-contract-by-user/{contract}/{address}";
  }

  // Event queries event info given event id.
  rpc Event(EventRequest) returns (EventResponse) {
    option (google.api.http).get = "/v1/events/{id}";
  }

  // ContractEvents queries 10 events that match the given page.
  rpc ContractEvents(ContractEventsRequest) returns (ContractEventsResponse) {
    option (google.api.http).get = "/v1/events/{contract_id}/{page}";
  }

  // ContractEventCount queries number of events that match the given contract
  // id.
  rpc ContractEventCount(ContractEventCountRequest)
      returns (ContractEventCountResponse) {
    option (google.api.http).get = "/v1/events/count/{contract_id}";
  }

  // EventsAtLedger queries all events of contract at specific ledger sequence.
  rpc EventsAtLedger(EventsAtLedgerRequest) returns (EventsAtLedgerResponse) {
    option (google.api.http).get =
        "/v1/events-at-ledger/{contract_id}/{ledger}";
  }

  // UserInteractionContracts queries list contracts user has interacted.
  rpc UserInteractionContracts(UserInteractionContractsRequest)
      returns (UserInteractionContractsResponse) {
    option (google.api.http).get = "/v1/user-contracts/{address}";
  }

  // ContractData queries list newest data entries of contract
  rpc ContractData(ContractDataRequest) returns (ContractDataResponse) {
    option (google.api.http).get = "/v1/contract-entries/{contract_id}/{page}";
  }
}
