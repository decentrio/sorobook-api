// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ledger/query.proto

package ledger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LedgerQuery_Ledger_FullMethodName     = "/ledger.LedgerQuery/Ledger"
	LedgerQuery_LedgerHash_FullMethodName = "/ledger.LedgerQuery/LedgerHash"
)

// LedgerQueryClient is the client API for LedgerQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerQueryClient interface {
	// Ledger queries ledger info given ledger sequence.
	Ledger(ctx context.Context, in *LedgerRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
	// LedgerHash queries ledger info given ledger hash.
	LedgerHash(ctx context.Context, in *LedgerHashRequest, opts ...grpc.CallOption) (*LedgerHashResponse, error)
}

type ledgerQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerQueryClient(cc grpc.ClientConnInterface) LedgerQueryClient {
	return &ledgerQueryClient{cc}
}

func (c *ledgerQueryClient) Ledger(ctx context.Context, in *LedgerRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, LedgerQuery_Ledger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerQueryClient) LedgerHash(ctx context.Context, in *LedgerHashRequest, opts ...grpc.CallOption) (*LedgerHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerHashResponse)
	err := c.cc.Invoke(ctx, LedgerQuery_LedgerHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerQueryServer is the server API for LedgerQuery service.
// All implementations must embed UnimplementedLedgerQueryServer
// for forward compatibility.
type LedgerQueryServer interface {
	// Ledger queries ledger info given ledger sequence.
	Ledger(context.Context, *LedgerRequest) (*LedgerResponse, error)
	// LedgerHash queries ledger info given ledger hash.
	LedgerHash(context.Context, *LedgerHashRequest) (*LedgerHashResponse, error)
	mustEmbedUnimplementedLedgerQueryServer()
}

// UnimplementedLedgerQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLedgerQueryServer struct{}

func (UnimplementedLedgerQueryServer) Ledger(context.Context, *LedgerRequest) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ledger not implemented")
}
func (UnimplementedLedgerQueryServer) LedgerHash(context.Context, *LedgerHashRequest) (*LedgerHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerHash not implemented")
}
func (UnimplementedLedgerQueryServer) mustEmbedUnimplementedLedgerQueryServer() {}
func (UnimplementedLedgerQueryServer) testEmbeddedByValue()                     {}

// UnsafeLedgerQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerQueryServer will
// result in compilation errors.
type UnsafeLedgerQueryServer interface {
	mustEmbedUnimplementedLedgerQueryServer()
}

func RegisterLedgerQueryServer(s grpc.ServiceRegistrar, srv LedgerQueryServer) {
	// If the following call pancis, it indicates UnimplementedLedgerQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LedgerQuery_ServiceDesc, srv)
}

func _LedgerQuery_Ledger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerQueryServer).Ledger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerQuery_Ledger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerQueryServer).Ledger(ctx, req.(*LedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerQuery_LedgerHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerQueryServer).LedgerHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerQuery_LedgerHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerQueryServer).LedgerHash(ctx, req.(*LedgerHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LedgerQuery_ServiceDesc is the grpc.ServiceDesc for LedgerQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.LedgerQuery",
	HandlerType: (*LedgerQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ledger",
			Handler:    _LedgerQuery_Ledger_Handler,
		},
		{
			MethodName: "LedgerHash",
			Handler:    _LedgerQuery_LedgerHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledger/query.proto",
}
