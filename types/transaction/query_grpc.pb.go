// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: transaction/query.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionQuery_Transaction_FullMethodName              = "/transaction.TransactionQuery/Transaction"
	TransactionQuery_TransactionsByAddress_FullMethodName    = "/transaction.TransactionQuery/TransactionsByAddress"
	TransactionQuery_TransactionsAtLedgerSeq_FullMethodName  = "/transaction.TransactionQuery/TransactionsAtLedgerSeq"
	TransactionQuery_TransactionsAtLedgerHash_FullMethodName = "/transaction.TransactionQuery/TransactionsAtLedgerHash"
	TransactionQuery_ContractTransactions_FullMethodName     = "/transaction.TransactionQuery/ContractTransactions"
	TransactionQuery_UserContractTransactions_FullMethodName = "/transaction.TransactionQuery/UserContractTransactions"
)

// TransactionQueryClient is the client API for TransactionQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionQueryClient interface {
	// Transaction queries transaction info given transaction hash.
	Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// TransactionsByAddress queries all transactions that match the given source
	// address.
	TransactionsByAddress(ctx context.Context, in *TransactionsByAddressRequest, opts ...grpc.CallOption) (*TransactionsByAddressResponse, error)
	// TransactionsAtLedgerSeq queries all transactions that match the given
	// ledger sequence.
	TransactionsAtLedgerSeq(ctx context.Context, in *TransactionsAtLedgerSeqRequest, opts ...grpc.CallOption) (*TransactionsAtLedgerSeqResponse, error)
	// TransactionsAtLedgerHash queries all transactions that match the given
	// ledger hash.
	TransactionsAtLedgerHash(ctx context.Context, in *TransactionsAtLedgerHashRequest, opts ...grpc.CallOption) (*TransactionsAtLedgerHashResponse, error)
	// ContractTransactions queries all transactions that match the given
	// contract id.
	ContractTransactions(ctx context.Context, in *ContractTransactionsRequest, opts ...grpc.CallOption) (*ContractTransactionsResponse, error)
	// UserContractTransactions queries all transactions that match the given
	// contract id and user address.
	UserContractTransactions(ctx context.Context, in *UserContractTransactionsRequest, opts ...grpc.CallOption) (*UserContractTransactionsResponse, error)
}

type transactionQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionQueryClient(cc grpc.ClientConnInterface) TransactionQueryClient {
	return &transactionQueryClient{cc}
}

func (c *transactionQueryClient) Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, TransactionQuery_Transaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryClient) TransactionsByAddress(ctx context.Context, in *TransactionsByAddressRequest, opts ...grpc.CallOption) (*TransactionsByAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionsByAddressResponse)
	err := c.cc.Invoke(ctx, TransactionQuery_TransactionsByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryClient) TransactionsAtLedgerSeq(ctx context.Context, in *TransactionsAtLedgerSeqRequest, opts ...grpc.CallOption) (*TransactionsAtLedgerSeqResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionsAtLedgerSeqResponse)
	err := c.cc.Invoke(ctx, TransactionQuery_TransactionsAtLedgerSeq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryClient) TransactionsAtLedgerHash(ctx context.Context, in *TransactionsAtLedgerHashRequest, opts ...grpc.CallOption) (*TransactionsAtLedgerHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionsAtLedgerHashResponse)
	err := c.cc.Invoke(ctx, TransactionQuery_TransactionsAtLedgerHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryClient) ContractTransactions(ctx context.Context, in *ContractTransactionsRequest, opts ...grpc.CallOption) (*ContractTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionQuery_ContractTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryClient) UserContractTransactions(ctx context.Context, in *UserContractTransactionsRequest, opts ...grpc.CallOption) (*UserContractTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserContractTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionQuery_UserContractTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionQueryServer is the server API for TransactionQuery service.
// All implementations must embed UnimplementedTransactionQueryServer
// for forward compatibility.
type TransactionQueryServer interface {
	// Transaction queries transaction info given transaction hash.
	Transaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// TransactionsByAddress queries all transactions that match the given source
	// address.
	TransactionsByAddress(context.Context, *TransactionsByAddressRequest) (*TransactionsByAddressResponse, error)
	// TransactionsAtLedgerSeq queries all transactions that match the given
	// ledger sequence.
	TransactionsAtLedgerSeq(context.Context, *TransactionsAtLedgerSeqRequest) (*TransactionsAtLedgerSeqResponse, error)
	// TransactionsAtLedgerHash queries all transactions that match the given
	// ledger hash.
	TransactionsAtLedgerHash(context.Context, *TransactionsAtLedgerHashRequest) (*TransactionsAtLedgerHashResponse, error)
	// ContractTransactions queries all transactions that match the given
	// contract id.
	ContractTransactions(context.Context, *ContractTransactionsRequest) (*ContractTransactionsResponse, error)
	// UserContractTransactions queries all transactions that match the given
	// contract id and user address.
	UserContractTransactions(context.Context, *UserContractTransactionsRequest) (*UserContractTransactionsResponse, error)
	mustEmbedUnimplementedTransactionQueryServer()
}

// UnimplementedTransactionQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionQueryServer struct{}

func (UnimplementedTransactionQueryServer) Transaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedTransactionQueryServer) TransactionsByAddress(context.Context, *TransactionsByAddressRequest) (*TransactionsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsByAddress not implemented")
}
func (UnimplementedTransactionQueryServer) TransactionsAtLedgerSeq(context.Context, *TransactionsAtLedgerSeqRequest) (*TransactionsAtLedgerSeqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsAtLedgerSeq not implemented")
}
func (UnimplementedTransactionQueryServer) TransactionsAtLedgerHash(context.Context, *TransactionsAtLedgerHashRequest) (*TransactionsAtLedgerHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsAtLedgerHash not implemented")
}
func (UnimplementedTransactionQueryServer) ContractTransactions(context.Context, *ContractTransactionsRequest) (*ContractTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractTransactions not implemented")
}
func (UnimplementedTransactionQueryServer) UserContractTransactions(context.Context, *UserContractTransactionsRequest) (*UserContractTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserContractTransactions not implemented")
}
func (UnimplementedTransactionQueryServer) mustEmbedUnimplementedTransactionQueryServer() {}
func (UnimplementedTransactionQueryServer) testEmbeddedByValue()                          {}

// UnsafeTransactionQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionQueryServer will
// result in compilation errors.
type UnsafeTransactionQueryServer interface {
	mustEmbedUnimplementedTransactionQueryServer()
}

func RegisterTransactionQueryServer(s grpc.ServiceRegistrar, srv TransactionQueryServer) {
	// If the following call pancis, it indicates UnimplementedTransactionQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionQuery_ServiceDesc, srv)
}

func _TransactionQuery_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQuery_Transaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServer).Transaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQuery_TransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServer).TransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQuery_TransactionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServer).TransactionsByAddress(ctx, req.(*TransactionsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQuery_TransactionsAtLedgerSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsAtLedgerSeqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServer).TransactionsAtLedgerSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQuery_TransactionsAtLedgerSeq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServer).TransactionsAtLedgerSeq(ctx, req.(*TransactionsAtLedgerSeqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQuery_TransactionsAtLedgerHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsAtLedgerHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServer).TransactionsAtLedgerHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQuery_TransactionsAtLedgerHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServer).TransactionsAtLedgerHash(ctx, req.(*TransactionsAtLedgerHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQuery_ContractTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServer).ContractTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQuery_ContractTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServer).ContractTransactions(ctx, req.(*ContractTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQuery_UserContractTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserContractTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServer).UserContractTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQuery_UserContractTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServer).UserContractTransactions(ctx, req.(*UserContractTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionQuery_ServiceDesc is the grpc.ServiceDesc for TransactionQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionQuery",
	HandlerType: (*TransactionQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transaction",
			Handler:    _TransactionQuery_Transaction_Handler,
		},
		{
			MethodName: "TransactionsByAddress",
			Handler:    _TransactionQuery_TransactionsByAddress_Handler,
		},
		{
			MethodName: "TransactionsAtLedgerSeq",
			Handler:    _TransactionQuery_TransactionsAtLedgerSeq_Handler,
		},
		{
			MethodName: "TransactionsAtLedgerHash",
			Handler:    _TransactionQuery_TransactionsAtLedgerHash_Handler,
		},
		{
			MethodName: "ContractTransactions",
			Handler:    _TransactionQuery_ContractTransactions_Handler,
		},
		{
			MethodName: "UserContractTransactions",
			Handler:    _TransactionQuery_UserContractTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/query.proto",
}
