// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Ledger_FullMethodName                   = "/v1.Query/Ledger"
	Query_LedgerHash_FullMethodName               = "/v1.Query/LedgerHash"
	Query_Transaction_FullMethodName              = "/v1.Query/Transaction"
	Query_TransactionsByAddress_FullMethodName    = "/v1.Query/TransactionsByAddress"
	Query_TransactionsAtLedgerSeq_FullMethodName  = "/v1.Query/TransactionsAtLedgerSeq"
	Query_TransactionsAtLedgerHash_FullMethodName = "/v1.Query/TransactionsAtLedgerHash"
	Query_ContractTransactions_FullMethodName     = "/v1.Query/ContractTransactions"
	Query_UserContractTransactions_FullMethodName = "/v1.Query/UserContractTransactions"
	Query_Event_FullMethodName                    = "/v1.Query/Event"
	Query_ContractEvents_FullMethodName           = "/v1.Query/ContractEvents"
	Query_ContractEventCount_FullMethodName       = "/v1.Query/ContractEventCount"
	Query_EventsAtLedger_FullMethodName           = "/v1.Query/EventsAtLedger"
	Query_UserInteractionContracts_FullMethodName = "/v1.Query/UserInteractionContracts"
	Query_ContractData_FullMethodName             = "/v1.Query/ContractData"
	Query_TransferEvents_FullMethodName           = "/v1.Query/TransferEvents"
	Query_TransferEventsFrom_FullMethodName       = "/v1.Query/TransferEventsFrom"
	Query_TransferEventsTo_FullMethodName         = "/v1.Query/TransferEventsTo"
	Query_MintEvents_FullMethodName               = "/v1.Query/MintEvents"
	Query_MintEventsAdmin_FullMethodName          = "/v1.Query/MintEventsAdmin"
	Query_MintEventsTo_FullMethodName             = "/v1.Query/MintEventsTo"
	Query_BurnEvents_FullMethodName               = "/v1.Query/BurnEvents"
	Query_BurnEventsFrom_FullMethodName           = "/v1.Query/BurnEventsFrom"
	Query_ClawbackEvents_FullMethodName           = "/v1.Query/ClawbackEvents"
	Query_ClawbackEventsAdmin_FullMethodName      = "/v1.Query/ClawbackEventsAdmin"
	Query_ClawbackEventsFrom_FullMethodName       = "/v1.Query/ClawbackEventsFrom"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Ledger queries ledger info given ledger sequence.
	Ledger(ctx context.Context, in *LedgerRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
	// LedgerHash queries ledger info given ledger hash.
	LedgerHash(ctx context.Context, in *LedgerHashRequest, opts ...grpc.CallOption) (*LedgerHashResponse, error)
	// Transaction queries transaction info given transaction hash.
	Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// TransactionsByAddress queries all transactions that match the given source
	// address.
	TransactionsByAddress(ctx context.Context, in *TransactionsByAddressRequest, opts ...grpc.CallOption) (*TransactionsByAddressResponse, error)
	// TransactionsAtLedgerSeq queries all transactions that match the given
	// ledger sequence.
	TransactionsAtLedgerSeq(ctx context.Context, in *TransactionsAtLedgerSeqRequest, opts ...grpc.CallOption) (*TransactionsAtLedgerSeqResponse, error)
	// TransactionsAtLedgerHash queries all transactions that match the given
	// ledger hash.
	TransactionsAtLedgerHash(ctx context.Context, in *TransactionsAtLedgerHashRequest, opts ...grpc.CallOption) (*TransactionsAtLedgerHashResponse, error)
	// ContractTransactions queries all transactions that match the given
	// contract id.
	ContractTransactions(ctx context.Context, in *ContractTransactionsRequest, opts ...grpc.CallOption) (*ContractTransactionsResponse, error)
	// UserContractTransactions queries all transactions that match the given
	// contract id and user address.
	UserContractTransactions(ctx context.Context, in *UserContractTransactionsRequest, opts ...grpc.CallOption) (*UserContractTransactionsResponse, error)
	// Event queries event info given event id.
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	// ContractEvents queries 10 events that match the given page.
	ContractEvents(ctx context.Context, in *ContractEventsRequest, opts ...grpc.CallOption) (*ContractEventsResponse, error)
	// ContractEventCount queries number of events that match the given contract
	// id.
	ContractEventCount(ctx context.Context, in *ContractEventCountRequest, opts ...grpc.CallOption) (*ContractEventCountResponse, error)
	// EventsAtLedger queries all events of contract at specific ledger sequence.
	EventsAtLedger(ctx context.Context, in *EventsAtLedgerRequest, opts ...grpc.CallOption) (*EventsAtLedgerResponse, error)
	// UserInteractionContracts queries list contracts user has interacted.
	UserInteractionContracts(ctx context.Context, in *UserInteractionContractsRequest, opts ...grpc.CallOption) (*UserInteractionContractsResponse, error)
	// ContractData queries list newest data entries of contract
	ContractData(ctx context.Context, in *ContractDataRequest, opts ...grpc.CallOption) (*ContractDataResponse, error)
	// TransferEvents queries 10 events that match the given contract id and page.
	TransferEvents(ctx context.Context, in *TransferEventsRequest, opts ...grpc.CallOption) (*TransferEventsResponse, error)
	// TransferEventsFrom queries 10 events that match the given from address and page.
	TransferEventsFrom(ctx context.Context, in *TransferEventsFromRequest, opts ...grpc.CallOption) (*TransferEventsFromResponse, error)
	// TransferEventsTo queries 10 events that match the given from address and page.
	TransferEventsTo(ctx context.Context, in *TransferEventsToRequest, opts ...grpc.CallOption) (*TransferEventsToResponse, error)
	// MintEvents queries 10 events that match the given contract id and page.
	MintEvents(ctx context.Context, in *MintEventsRequest, opts ...grpc.CallOption) (*MintEventsResponse, error)
	// MintEventsAdmin queries 10 events that match the given admin and page.
	MintEventsAdmin(ctx context.Context, in *MintEventsAdminRequest, opts ...grpc.CallOption) (*MintEventsAdminResponse, error)
	// MintEventsTo queries 10 events that match the given to address and page.
	MintEventsTo(ctx context.Context, in *MintEventsToRequest, opts ...grpc.CallOption) (*MintEventsToResponse, error)
	// BurnEvents queries 10 events that match the given contract id and page.
	BurnEvents(ctx context.Context, in *BurnEventsRequest, opts ...grpc.CallOption) (*BurnEventsResponse, error)
	// BurnEventsFrom queries 10 events that match the given from address and page.
	BurnEventsFrom(ctx context.Context, in *BurnEventsFromRequest, opts ...grpc.CallOption) (*BurnEventsFromResponse, error)
	// ClawbackEvents queries 10 events that match the given contract id and page.
	ClawbackEvents(ctx context.Context, in *ClawbackEventsRequest, opts ...grpc.CallOption) (*ClawbackEventsResponse, error)
	// ClawbackEventsAdmin queries 10 events that match the given admin address and page.
	ClawbackEventsAdmin(ctx context.Context, in *ClawbackEventsAdminRequest, opts ...grpc.CallOption) (*ClawbackEventsAdminResponse, error)
	// ClawbackEventsFrom queries 10 events that match the given drom address and page.
	ClawbackEventsFrom(ctx context.Context, in *ClawbackEventsFromRequest, opts ...grpc.CallOption) (*ClawbackEventsFromResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Ledger(ctx context.Context, in *LedgerRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, Query_Ledger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerHash(ctx context.Context, in *LedgerHashRequest, opts ...grpc.CallOption) (*LedgerHashResponse, error) {
	out := new(LedgerHashResponse)
	err := c.cc.Invoke(ctx, Query_LedgerHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, Query_Transaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransactionsByAddress(ctx context.Context, in *TransactionsByAddressRequest, opts ...grpc.CallOption) (*TransactionsByAddressResponse, error) {
	out := new(TransactionsByAddressResponse)
	err := c.cc.Invoke(ctx, Query_TransactionsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransactionsAtLedgerSeq(ctx context.Context, in *TransactionsAtLedgerSeqRequest, opts ...grpc.CallOption) (*TransactionsAtLedgerSeqResponse, error) {
	out := new(TransactionsAtLedgerSeqResponse)
	err := c.cc.Invoke(ctx, Query_TransactionsAtLedgerSeq_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransactionsAtLedgerHash(ctx context.Context, in *TransactionsAtLedgerHashRequest, opts ...grpc.CallOption) (*TransactionsAtLedgerHashResponse, error) {
	out := new(TransactionsAtLedgerHashResponse)
	err := c.cc.Invoke(ctx, Query_TransactionsAtLedgerHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractTransactions(ctx context.Context, in *ContractTransactionsRequest, opts ...grpc.CallOption) (*ContractTransactionsResponse, error) {
	out := new(ContractTransactionsResponse)
	err := c.cc.Invoke(ctx, Query_ContractTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserContractTransactions(ctx context.Context, in *UserContractTransactionsRequest, opts ...grpc.CallOption) (*UserContractTransactionsResponse, error) {
	out := new(UserContractTransactionsResponse)
	err := c.cc.Invoke(ctx, Query_UserContractTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, Query_Event_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractEvents(ctx context.Context, in *ContractEventsRequest, opts ...grpc.CallOption) (*ContractEventsResponse, error) {
	out := new(ContractEventsResponse)
	err := c.cc.Invoke(ctx, Query_ContractEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractEventCount(ctx context.Context, in *ContractEventCountRequest, opts ...grpc.CallOption) (*ContractEventCountResponse, error) {
	out := new(ContractEventCountResponse)
	err := c.cc.Invoke(ctx, Query_ContractEventCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EventsAtLedger(ctx context.Context, in *EventsAtLedgerRequest, opts ...grpc.CallOption) (*EventsAtLedgerResponse, error) {
	out := new(EventsAtLedgerResponse)
	err := c.cc.Invoke(ctx, Query_EventsAtLedger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserInteractionContracts(ctx context.Context, in *UserInteractionContractsRequest, opts ...grpc.CallOption) (*UserInteractionContractsResponse, error) {
	out := new(UserInteractionContractsResponse)
	err := c.cc.Invoke(ctx, Query_UserInteractionContracts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractData(ctx context.Context, in *ContractDataRequest, opts ...grpc.CallOption) (*ContractDataResponse, error) {
	out := new(ContractDataResponse)
	err := c.cc.Invoke(ctx, Query_ContractData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferEvents(ctx context.Context, in *TransferEventsRequest, opts ...grpc.CallOption) (*TransferEventsResponse, error) {
	out := new(TransferEventsResponse)
	err := c.cc.Invoke(ctx, Query_TransferEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferEventsFrom(ctx context.Context, in *TransferEventsFromRequest, opts ...grpc.CallOption) (*TransferEventsFromResponse, error) {
	out := new(TransferEventsFromResponse)
	err := c.cc.Invoke(ctx, Query_TransferEventsFrom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferEventsTo(ctx context.Context, in *TransferEventsToRequest, opts ...grpc.CallOption) (*TransferEventsToResponse, error) {
	out := new(TransferEventsToResponse)
	err := c.cc.Invoke(ctx, Query_TransferEventsTo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintEvents(ctx context.Context, in *MintEventsRequest, opts ...grpc.CallOption) (*MintEventsResponse, error) {
	out := new(MintEventsResponse)
	err := c.cc.Invoke(ctx, Query_MintEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintEventsAdmin(ctx context.Context, in *MintEventsAdminRequest, opts ...grpc.CallOption) (*MintEventsAdminResponse, error) {
	out := new(MintEventsAdminResponse)
	err := c.cc.Invoke(ctx, Query_MintEventsAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintEventsTo(ctx context.Context, in *MintEventsToRequest, opts ...grpc.CallOption) (*MintEventsToResponse, error) {
	out := new(MintEventsToResponse)
	err := c.cc.Invoke(ctx, Query_MintEventsTo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BurnEvents(ctx context.Context, in *BurnEventsRequest, opts ...grpc.CallOption) (*BurnEventsResponse, error) {
	out := new(BurnEventsResponse)
	err := c.cc.Invoke(ctx, Query_BurnEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BurnEventsFrom(ctx context.Context, in *BurnEventsFromRequest, opts ...grpc.CallOption) (*BurnEventsFromResponse, error) {
	out := new(BurnEventsFromResponse)
	err := c.cc.Invoke(ctx, Query_BurnEventsFrom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClawbackEvents(ctx context.Context, in *ClawbackEventsRequest, opts ...grpc.CallOption) (*ClawbackEventsResponse, error) {
	out := new(ClawbackEventsResponse)
	err := c.cc.Invoke(ctx, Query_ClawbackEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClawbackEventsAdmin(ctx context.Context, in *ClawbackEventsAdminRequest, opts ...grpc.CallOption) (*ClawbackEventsAdminResponse, error) {
	out := new(ClawbackEventsAdminResponse)
	err := c.cc.Invoke(ctx, Query_ClawbackEventsAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClawbackEventsFrom(ctx context.Context, in *ClawbackEventsFromRequest, opts ...grpc.CallOption) (*ClawbackEventsFromResponse, error) {
	out := new(ClawbackEventsFromResponse)
	err := c.cc.Invoke(ctx, Query_ClawbackEventsFrom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Ledger queries ledger info given ledger sequence.
	Ledger(context.Context, *LedgerRequest) (*LedgerResponse, error)
	// LedgerHash queries ledger info given ledger hash.
	LedgerHash(context.Context, *LedgerHashRequest) (*LedgerHashResponse, error)
	// Transaction queries transaction info given transaction hash.
	Transaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// TransactionsByAddress queries all transactions that match the given source
	// address.
	TransactionsByAddress(context.Context, *TransactionsByAddressRequest) (*TransactionsByAddressResponse, error)
	// TransactionsAtLedgerSeq queries all transactions that match the given
	// ledger sequence.
	TransactionsAtLedgerSeq(context.Context, *TransactionsAtLedgerSeqRequest) (*TransactionsAtLedgerSeqResponse, error)
	// TransactionsAtLedgerHash queries all transactions that match the given
	// ledger hash.
	TransactionsAtLedgerHash(context.Context, *TransactionsAtLedgerHashRequest) (*TransactionsAtLedgerHashResponse, error)
	// ContractTransactions queries all transactions that match the given
	// contract id.
	ContractTransactions(context.Context, *ContractTransactionsRequest) (*ContractTransactionsResponse, error)
	// UserContractTransactions queries all transactions that match the given
	// contract id and user address.
	UserContractTransactions(context.Context, *UserContractTransactionsRequest) (*UserContractTransactionsResponse, error)
	// Event queries event info given event id.
	Event(context.Context, *EventRequest) (*EventResponse, error)
	// ContractEvents queries 10 events that match the given page.
	ContractEvents(context.Context, *ContractEventsRequest) (*ContractEventsResponse, error)
	// ContractEventCount queries number of events that match the given contract
	// id.
	ContractEventCount(context.Context, *ContractEventCountRequest) (*ContractEventCountResponse, error)
	// EventsAtLedger queries all events of contract at specific ledger sequence.
	EventsAtLedger(context.Context, *EventsAtLedgerRequest) (*EventsAtLedgerResponse, error)
	// UserInteractionContracts queries list contracts user has interacted.
	UserInteractionContracts(context.Context, *UserInteractionContractsRequest) (*UserInteractionContractsResponse, error)
	// ContractData queries list newest data entries of contract
	ContractData(context.Context, *ContractDataRequest) (*ContractDataResponse, error)
	// TransferEvents queries 10 events that match the given contract id and page.
	TransferEvents(context.Context, *TransferEventsRequest) (*TransferEventsResponse, error)
	// TransferEventsFrom queries 10 events that match the given from address and page.
	TransferEventsFrom(context.Context, *TransferEventsFromRequest) (*TransferEventsFromResponse, error)
	// TransferEventsTo queries 10 events that match the given from address and page.
	TransferEventsTo(context.Context, *TransferEventsToRequest) (*TransferEventsToResponse, error)
	// MintEvents queries 10 events that match the given contract id and page.
	MintEvents(context.Context, *MintEventsRequest) (*MintEventsResponse, error)
	// MintEventsAdmin queries 10 events that match the given admin and page.
	MintEventsAdmin(context.Context, *MintEventsAdminRequest) (*MintEventsAdminResponse, error)
	// MintEventsTo queries 10 events that match the given to address and page.
	MintEventsTo(context.Context, *MintEventsToRequest) (*MintEventsToResponse, error)
	// BurnEvents queries 10 events that match the given contract id and page.
	BurnEvents(context.Context, *BurnEventsRequest) (*BurnEventsResponse, error)
	// BurnEventsFrom queries 10 events that match the given from address and page.
	BurnEventsFrom(context.Context, *BurnEventsFromRequest) (*BurnEventsFromResponse, error)
	// ClawbackEvents queries 10 events that match the given contract id and page.
	ClawbackEvents(context.Context, *ClawbackEventsRequest) (*ClawbackEventsResponse, error)
	// ClawbackEventsAdmin queries 10 events that match the given admin address and page.
	ClawbackEventsAdmin(context.Context, *ClawbackEventsAdminRequest) (*ClawbackEventsAdminResponse, error)
	// ClawbackEventsFrom queries 10 events that match the given drom address and page.
	ClawbackEventsFrom(context.Context, *ClawbackEventsFromRequest) (*ClawbackEventsFromResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Ledger(context.Context, *LedgerRequest) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ledger not implemented")
}
func (UnimplementedQueryServer) LedgerHash(context.Context, *LedgerHashRequest) (*LedgerHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerHash not implemented")
}
func (UnimplementedQueryServer) Transaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedQueryServer) TransactionsByAddress(context.Context, *TransactionsByAddressRequest) (*TransactionsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsByAddress not implemented")
}
func (UnimplementedQueryServer) TransactionsAtLedgerSeq(context.Context, *TransactionsAtLedgerSeqRequest) (*TransactionsAtLedgerSeqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsAtLedgerSeq not implemented")
}
func (UnimplementedQueryServer) TransactionsAtLedgerHash(context.Context, *TransactionsAtLedgerHashRequest) (*TransactionsAtLedgerHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsAtLedgerHash not implemented")
}
func (UnimplementedQueryServer) ContractTransactions(context.Context, *ContractTransactionsRequest) (*ContractTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractTransactions not implemented")
}
func (UnimplementedQueryServer) UserContractTransactions(context.Context, *UserContractTransactionsRequest) (*UserContractTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserContractTransactions not implemented")
}
func (UnimplementedQueryServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedQueryServer) ContractEvents(context.Context, *ContractEventsRequest) (*ContractEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractEvents not implemented")
}
func (UnimplementedQueryServer) ContractEventCount(context.Context, *ContractEventCountRequest) (*ContractEventCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractEventCount not implemented")
}
func (UnimplementedQueryServer) EventsAtLedger(context.Context, *EventsAtLedgerRequest) (*EventsAtLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventsAtLedger not implemented")
}
func (UnimplementedQueryServer) UserInteractionContracts(context.Context, *UserInteractionContractsRequest) (*UserInteractionContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInteractionContracts not implemented")
}
func (UnimplementedQueryServer) ContractData(context.Context, *ContractDataRequest) (*ContractDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractData not implemented")
}
func (UnimplementedQueryServer) TransferEvents(context.Context, *TransferEventsRequest) (*TransferEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEvents not implemented")
}
func (UnimplementedQueryServer) TransferEventsFrom(context.Context, *TransferEventsFromRequest) (*TransferEventsFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEventsFrom not implemented")
}
func (UnimplementedQueryServer) TransferEventsTo(context.Context, *TransferEventsToRequest) (*TransferEventsToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEventsTo not implemented")
}
func (UnimplementedQueryServer) MintEvents(context.Context, *MintEventsRequest) (*MintEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintEvents not implemented")
}
func (UnimplementedQueryServer) MintEventsAdmin(context.Context, *MintEventsAdminRequest) (*MintEventsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintEventsAdmin not implemented")
}
func (UnimplementedQueryServer) MintEventsTo(context.Context, *MintEventsToRequest) (*MintEventsToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintEventsTo not implemented")
}
func (UnimplementedQueryServer) BurnEvents(context.Context, *BurnEventsRequest) (*BurnEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnEvents not implemented")
}
func (UnimplementedQueryServer) BurnEventsFrom(context.Context, *BurnEventsFromRequest) (*BurnEventsFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnEventsFrom not implemented")
}
func (UnimplementedQueryServer) ClawbackEvents(context.Context, *ClawbackEventsRequest) (*ClawbackEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClawbackEvents not implemented")
}
func (UnimplementedQueryServer) ClawbackEventsAdmin(context.Context, *ClawbackEventsAdminRequest) (*ClawbackEventsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClawbackEventsAdmin not implemented")
}
func (UnimplementedQueryServer) ClawbackEventsFrom(context.Context, *ClawbackEventsFromRequest) (*ClawbackEventsFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClawbackEventsFrom not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Ledger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ledger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Ledger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ledger(ctx, req.(*LedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LedgerHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerHash(ctx, req.(*LedgerHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Transaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Transaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TransactionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransactionsByAddress(ctx, req.(*TransactionsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransactionsAtLedgerSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsAtLedgerSeqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransactionsAtLedgerSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TransactionsAtLedgerSeq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransactionsAtLedgerSeq(ctx, req.(*TransactionsAtLedgerSeqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransactionsAtLedgerHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsAtLedgerHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransactionsAtLedgerHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TransactionsAtLedgerHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransactionsAtLedgerHash(ctx, req.(*TransactionsAtLedgerHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ContractTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractTransactions(ctx, req.(*ContractTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserContractTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserContractTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserContractTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserContractTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserContractTransactions(ctx, req.(*UserContractTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Event_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ContractEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractEvents(ctx, req.(*ContractEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractEventCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractEventCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractEventCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ContractEventCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractEventCount(ctx, req.(*ContractEventCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EventsAtLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsAtLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EventsAtLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EventsAtLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EventsAtLedger(ctx, req.(*EventsAtLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserInteractionContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInteractionContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserInteractionContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserInteractionContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserInteractionContracts(ctx, req.(*UserInteractionContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ContractData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractData(ctx, req.(*ContractDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TransferEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferEvents(ctx, req.(*TransferEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferEventsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEventsFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferEventsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TransferEventsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferEventsFrom(ctx, req.(*TransferEventsFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferEventsTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEventsToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferEventsTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TransferEventsTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferEventsTo(ctx, req.(*TransferEventsToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MintEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintEvents(ctx, req.(*MintEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintEventsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintEventsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintEventsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MintEventsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintEventsAdmin(ctx, req.(*MintEventsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintEventsTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintEventsToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintEventsTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MintEventsTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintEventsTo(ctx, req.(*MintEventsToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BurnEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BurnEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BurnEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BurnEvents(ctx, req.(*BurnEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BurnEventsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnEventsFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BurnEventsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BurnEventsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BurnEventsFrom(ctx, req.(*BurnEventsFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClawbackEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClawbackEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClawbackEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ClawbackEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClawbackEvents(ctx, req.(*ClawbackEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClawbackEventsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClawbackEventsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClawbackEventsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ClawbackEventsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClawbackEventsAdmin(ctx, req.(*ClawbackEventsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClawbackEventsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClawbackEventsFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClawbackEventsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ClawbackEventsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClawbackEventsFrom(ctx, req.(*ClawbackEventsFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ledger",
			Handler:    _Query_Ledger_Handler,
		},
		{
			MethodName: "LedgerHash",
			Handler:    _Query_LedgerHash_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _Query_Transaction_Handler,
		},
		{
			MethodName: "TransactionsByAddress",
			Handler:    _Query_TransactionsByAddress_Handler,
		},
		{
			MethodName: "TransactionsAtLedgerSeq",
			Handler:    _Query_TransactionsAtLedgerSeq_Handler,
		},
		{
			MethodName: "TransactionsAtLedgerHash",
			Handler:    _Query_TransactionsAtLedgerHash_Handler,
		},
		{
			MethodName: "ContractTransactions",
			Handler:    _Query_ContractTransactions_Handler,
		},
		{
			MethodName: "UserContractTransactions",
			Handler:    _Query_UserContractTransactions_Handler,
		},
		{
			MethodName: "Event",
			Handler:    _Query_Event_Handler,
		},
		{
			MethodName: "ContractEvents",
			Handler:    _Query_ContractEvents_Handler,
		},
		{
			MethodName: "ContractEventCount",
			Handler:    _Query_ContractEventCount_Handler,
		},
		{
			MethodName: "EventsAtLedger",
			Handler:    _Query_EventsAtLedger_Handler,
		},
		{
			MethodName: "UserInteractionContracts",
			Handler:    _Query_UserInteractionContracts_Handler,
		},
		{
			MethodName: "ContractData",
			Handler:    _Query_ContractData_Handler,
		},
		{
			MethodName: "TransferEvents",
			Handler:    _Query_TransferEvents_Handler,
		},
		{
			MethodName: "TransferEventsFrom",
			Handler:    _Query_TransferEventsFrom_Handler,
		},
		{
			MethodName: "TransferEventsTo",
			Handler:    _Query_TransferEventsTo_Handler,
		},
		{
			MethodName: "MintEvents",
			Handler:    _Query_MintEvents_Handler,
		},
		{
			MethodName: "MintEventsAdmin",
			Handler:    _Query_MintEventsAdmin_Handler,
		},
		{
			MethodName: "MintEventsTo",
			Handler:    _Query_MintEventsTo_Handler,
		},
		{
			MethodName: "BurnEvents",
			Handler:    _Query_BurnEvents_Handler,
		},
		{
			MethodName: "BurnEventsFrom",
			Handler:    _Query_BurnEventsFrom_Handler,
		},
		{
			MethodName: "ClawbackEvents",
			Handler:    _Query_ClawbackEvents_Handler,
		},
		{
			MethodName: "ClawbackEventsAdmin",
			Handler:    _Query_ClawbackEventsAdmin_Handler,
		},
		{
			MethodName: "ClawbackEventsFrom",
			Handler:    _Query_ClawbackEventsFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/query.proto",
}
