// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: contract/query.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContractQuery_UserInteractionContracts_FullMethodName = "/contract.ContractQuery/UserInteractionContracts"
	ContractQuery_ContractData_FullMethodName             = "/contract.ContractQuery/ContractData"
	ContractQuery_ContractCode_FullMethodName             = "/contract.ContractQuery/ContractCode"
	ContractQuery_ContractCodes_FullMethodName            = "/contract.ContractQuery/ContractCodes"
	ContractQuery_ContractsAtLedger_FullMethodName        = "/contract.ContractQuery/ContractsAtLedger"
)

// ContractQueryClient is the client API for ContractQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractQueryClient interface {
	// UserInteractionContracts queries list contracts user has interacted.
	UserInteractionContracts(ctx context.Context, in *UserInteractionContractsRequest, opts ...grpc.CallOption) (*UserInteractionContractsResponse, error)
	// ContractData queries list newest data entries of contract
	ContractData(ctx context.Context, in *ContractDataRequest, opts ...grpc.CallOption) (*ContractDataResponse, error)
	// ContracCode queries contract code data with the given contract id
	ContractCode(ctx context.Context, in *ContractCodeRequest, opts ...grpc.CallOption) (*ContractCodeResponse, error)
	// ContracCodes queries contract codes have been deployed
	ContractCodes(ctx context.Context, in *ContractCodesRequest, opts ...grpc.CallOption) (*ContractCodesResponse, error)
	// ContractsAtLedger queries contract codes have been deployed at the given
	// ledger
	ContractsAtLedger(ctx context.Context, in *ContractsAtLedgerRequest, opts ...grpc.CallOption) (*ContractsAtLedgerResponse, error)
}

type contractQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewContractQueryClient(cc grpc.ClientConnInterface) ContractQueryClient {
	return &contractQueryClient{cc}
}

func (c *contractQueryClient) UserInteractionContracts(ctx context.Context, in *UserInteractionContractsRequest, opts ...grpc.CallOption) (*UserInteractionContractsResponse, error) {
	out := new(UserInteractionContractsResponse)
	err := c.cc.Invoke(ctx, ContractQuery_UserInteractionContracts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractQueryClient) ContractData(ctx context.Context, in *ContractDataRequest, opts ...grpc.CallOption) (*ContractDataResponse, error) {
	out := new(ContractDataResponse)
	err := c.cc.Invoke(ctx, ContractQuery_ContractData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractQueryClient) ContractCode(ctx context.Context, in *ContractCodeRequest, opts ...grpc.CallOption) (*ContractCodeResponse, error) {
	out := new(ContractCodeResponse)
	err := c.cc.Invoke(ctx, ContractQuery_ContractCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractQueryClient) ContractCodes(ctx context.Context, in *ContractCodesRequest, opts ...grpc.CallOption) (*ContractCodesResponse, error) {
	out := new(ContractCodesResponse)
	err := c.cc.Invoke(ctx, ContractQuery_ContractCodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractQueryClient) ContractsAtLedger(ctx context.Context, in *ContractsAtLedgerRequest, opts ...grpc.CallOption) (*ContractsAtLedgerResponse, error) {
	out := new(ContractsAtLedgerResponse)
	err := c.cc.Invoke(ctx, ContractQuery_ContractsAtLedger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractQueryServer is the server API for ContractQuery service.
// All implementations must embed UnimplementedContractQueryServer
// for forward compatibility
type ContractQueryServer interface {
	// UserInteractionContracts queries list contracts user has interacted.
	UserInteractionContracts(context.Context, *UserInteractionContractsRequest) (*UserInteractionContractsResponse, error)
	// ContractData queries list newest data entries of contract
	ContractData(context.Context, *ContractDataRequest) (*ContractDataResponse, error)
	// ContracCode queries contract code data with the given contract id
	ContractCode(context.Context, *ContractCodeRequest) (*ContractCodeResponse, error)
	// ContracCodes queries contract codes have been deployed
	ContractCodes(context.Context, *ContractCodesRequest) (*ContractCodesResponse, error)
	// ContractsAtLedger queries contract codes have been deployed at the given
	// ledger
	ContractsAtLedger(context.Context, *ContractsAtLedgerRequest) (*ContractsAtLedgerResponse, error)
	mustEmbedUnimplementedContractQueryServer()
}

// UnimplementedContractQueryServer must be embedded to have forward compatible implementations.
type UnimplementedContractQueryServer struct {
}

func (UnimplementedContractQueryServer) UserInteractionContracts(context.Context, *UserInteractionContractsRequest) (*UserInteractionContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInteractionContracts not implemented")
}
func (UnimplementedContractQueryServer) ContractData(context.Context, *ContractDataRequest) (*ContractDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractData not implemented")
}
func (UnimplementedContractQueryServer) ContractCode(context.Context, *ContractCodeRequest) (*ContractCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCode not implemented")
}
func (UnimplementedContractQueryServer) ContractCodes(context.Context, *ContractCodesRequest) (*ContractCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCodes not implemented")
}
func (UnimplementedContractQueryServer) ContractsAtLedger(context.Context, *ContractsAtLedgerRequest) (*ContractsAtLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractsAtLedger not implemented")
}
func (UnimplementedContractQueryServer) mustEmbedUnimplementedContractQueryServer() {}

// UnsafeContractQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractQueryServer will
// result in compilation errors.
type UnsafeContractQueryServer interface {
	mustEmbedUnimplementedContractQueryServer()
}

func RegisterContractQueryServer(s grpc.ServiceRegistrar, srv ContractQueryServer) {
	s.RegisterService(&ContractQuery_ServiceDesc, srv)
}

func _ContractQuery_UserInteractionContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInteractionContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractQueryServer).UserInteractionContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractQuery_UserInteractionContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractQueryServer).UserInteractionContracts(ctx, req.(*UserInteractionContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractQuery_ContractData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractQueryServer).ContractData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractQuery_ContractData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractQueryServer).ContractData(ctx, req.(*ContractDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractQuery_ContractCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractQueryServer).ContractCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractQuery_ContractCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractQueryServer).ContractCode(ctx, req.(*ContractCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractQuery_ContractCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractQueryServer).ContractCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractQuery_ContractCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractQueryServer).ContractCodes(ctx, req.(*ContractCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractQuery_ContractsAtLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractsAtLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractQueryServer).ContractsAtLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractQuery_ContractsAtLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractQueryServer).ContractsAtLedger(ctx, req.(*ContractsAtLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractQuery_ServiceDesc is the grpc.ServiceDesc for ContractQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contract.ContractQuery",
	HandlerType: (*ContractQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInteractionContracts",
			Handler:    _ContractQuery_UserInteractionContracts_Handler,
		},
		{
			MethodName: "ContractData",
			Handler:    _ContractQuery_ContractData_Handler,
		},
		{
			MethodName: "ContractCode",
			Handler:    _ContractQuery_ContractCode_Handler,
		},
		{
			MethodName: "ContractCodes",
			Handler:    _ContractQuery_ContractCodes_Handler,
		},
		{
			MethodName: "ContractsAtLedger",
			Handler:    _ContractQuery_ContractsAtLedger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/query.proto",
}
