// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: event/query.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EventQuery_Event_FullMethodName               = "/event.EventQuery/Event"
	EventQuery_ContractEvents_FullMethodName      = "/event.EventQuery/ContractEvents"
	EventQuery_ContractEventCount_FullMethodName  = "/event.EventQuery/ContractEventCount"
	EventQuery_EventsAtLedger_FullMethodName      = "/event.EventQuery/EventsAtLedger"
	EventQuery_TransferEvents_FullMethodName      = "/event.EventQuery/TransferEvents"
	EventQuery_TransferEventsFrom_FullMethodName  = "/event.EventQuery/TransferEventsFrom"
	EventQuery_TransferEventsTo_FullMethodName    = "/event.EventQuery/TransferEventsTo"
	EventQuery_MintEvents_FullMethodName          = "/event.EventQuery/MintEvents"
	EventQuery_MintEventsAdmin_FullMethodName     = "/event.EventQuery/MintEventsAdmin"
	EventQuery_MintEventsTo_FullMethodName        = "/event.EventQuery/MintEventsTo"
	EventQuery_BurnEvents_FullMethodName          = "/event.EventQuery/BurnEvents"
	EventQuery_BurnEventsFrom_FullMethodName      = "/event.EventQuery/BurnEventsFrom"
	EventQuery_ClawbackEvents_FullMethodName      = "/event.EventQuery/ClawbackEvents"
	EventQuery_ClawbackEventsAdmin_FullMethodName = "/event.EventQuery/ClawbackEventsAdmin"
	EventQuery_ClawbackEventsFrom_FullMethodName  = "/event.EventQuery/ClawbackEventsFrom"
)

// EventQueryClient is the client API for EventQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventQueryClient interface {
	// Event queries event info given event id.
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	// ContractEvents queries 10 events that match the given page.
	ContractEvents(ctx context.Context, in *ContractEventsRequest, opts ...grpc.CallOption) (*ContractEventsResponse, error)
	// ContractEventCount queries number of events that match the given contract
	// id.
	ContractEventCount(ctx context.Context, in *ContractEventCountRequest, opts ...grpc.CallOption) (*ContractEventCountResponse, error)
	// EventsAtLedger queries all events of contract at specific ledger sequence.
	EventsAtLedger(ctx context.Context, in *EventsAtLedgerRequest, opts ...grpc.CallOption) (*EventsAtLedgerResponse, error)
	// TransferEvents queries 10 events that match the given contract id and page.
	TransferEvents(ctx context.Context, in *TransferEventsRequest, opts ...grpc.CallOption) (*TransferEventsResponse, error)
	// TransferEventsFrom queries 10 events that match the given from address and page.
	TransferEventsFrom(ctx context.Context, in *TransferEventsFromRequest, opts ...grpc.CallOption) (*TransferEventsFromResponse, error)
	// TransferEventsTo queries 10 events that match the given from address and page.
	TransferEventsTo(ctx context.Context, in *TransferEventsToRequest, opts ...grpc.CallOption) (*TransferEventsToResponse, error)
	// MintEvents queries 10 events that match the given contract id and page.
	MintEvents(ctx context.Context, in *MintEventsRequest, opts ...grpc.CallOption) (*MintEventsResponse, error)
	// MintEventsAdmin queries 10 events that match the given admin and page.
	MintEventsAdmin(ctx context.Context, in *MintEventsAdminRequest, opts ...grpc.CallOption) (*MintEventsAdminResponse, error)
	// MintEventsTo queries 10 events that match the given to address and page.
	MintEventsTo(ctx context.Context, in *MintEventsToRequest, opts ...grpc.CallOption) (*MintEventsToResponse, error)
	// BurnEvents queries 10 events that match the given contract id and page.
	BurnEvents(ctx context.Context, in *BurnEventsRequest, opts ...grpc.CallOption) (*BurnEventsResponse, error)
	// BurnEventsFrom queries 10 events that match the given from address and page.
	BurnEventsFrom(ctx context.Context, in *BurnEventsFromRequest, opts ...grpc.CallOption) (*BurnEventsFromResponse, error)
	// ClawbackEvents queries 10 events that match the given contract id and page.
	ClawbackEvents(ctx context.Context, in *ClawbackEventsRequest, opts ...grpc.CallOption) (*ClawbackEventsResponse, error)
	// ClawbackEventsAdmin queries 10 events that match the given admin address and page.
	ClawbackEventsAdmin(ctx context.Context, in *ClawbackEventsAdminRequest, opts ...grpc.CallOption) (*ClawbackEventsAdminResponse, error)
	// ClawbackEventsFrom queries 10 events that match the given drom address and page.
	ClawbackEventsFrom(ctx context.Context, in *ClawbackEventsFromRequest, opts ...grpc.CallOption) (*ClawbackEventsFromResponse, error)
}

type eventQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewEventQueryClient(cc grpc.ClientConnInterface) EventQueryClient {
	return &eventQueryClient{cc}
}

func (c *eventQueryClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, EventQuery_Event_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) ContractEvents(ctx context.Context, in *ContractEventsRequest, opts ...grpc.CallOption) (*ContractEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractEventsResponse)
	err := c.cc.Invoke(ctx, EventQuery_ContractEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) ContractEventCount(ctx context.Context, in *ContractEventCountRequest, opts ...grpc.CallOption) (*ContractEventCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractEventCountResponse)
	err := c.cc.Invoke(ctx, EventQuery_ContractEventCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) EventsAtLedger(ctx context.Context, in *EventsAtLedgerRequest, opts ...grpc.CallOption) (*EventsAtLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventsAtLedgerResponse)
	err := c.cc.Invoke(ctx, EventQuery_EventsAtLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) TransferEvents(ctx context.Context, in *TransferEventsRequest, opts ...grpc.CallOption) (*TransferEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferEventsResponse)
	err := c.cc.Invoke(ctx, EventQuery_TransferEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) TransferEventsFrom(ctx context.Context, in *TransferEventsFromRequest, opts ...grpc.CallOption) (*TransferEventsFromResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferEventsFromResponse)
	err := c.cc.Invoke(ctx, EventQuery_TransferEventsFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) TransferEventsTo(ctx context.Context, in *TransferEventsToRequest, opts ...grpc.CallOption) (*TransferEventsToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferEventsToResponse)
	err := c.cc.Invoke(ctx, EventQuery_TransferEventsTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) MintEvents(ctx context.Context, in *MintEventsRequest, opts ...grpc.CallOption) (*MintEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MintEventsResponse)
	err := c.cc.Invoke(ctx, EventQuery_MintEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) MintEventsAdmin(ctx context.Context, in *MintEventsAdminRequest, opts ...grpc.CallOption) (*MintEventsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MintEventsAdminResponse)
	err := c.cc.Invoke(ctx, EventQuery_MintEventsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) MintEventsTo(ctx context.Context, in *MintEventsToRequest, opts ...grpc.CallOption) (*MintEventsToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MintEventsToResponse)
	err := c.cc.Invoke(ctx, EventQuery_MintEventsTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) BurnEvents(ctx context.Context, in *BurnEventsRequest, opts ...grpc.CallOption) (*BurnEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BurnEventsResponse)
	err := c.cc.Invoke(ctx, EventQuery_BurnEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) BurnEventsFrom(ctx context.Context, in *BurnEventsFromRequest, opts ...grpc.CallOption) (*BurnEventsFromResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BurnEventsFromResponse)
	err := c.cc.Invoke(ctx, EventQuery_BurnEventsFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) ClawbackEvents(ctx context.Context, in *ClawbackEventsRequest, opts ...grpc.CallOption) (*ClawbackEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClawbackEventsResponse)
	err := c.cc.Invoke(ctx, EventQuery_ClawbackEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) ClawbackEventsAdmin(ctx context.Context, in *ClawbackEventsAdminRequest, opts ...grpc.CallOption) (*ClawbackEventsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClawbackEventsAdminResponse)
	err := c.cc.Invoke(ctx, EventQuery_ClawbackEventsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) ClawbackEventsFrom(ctx context.Context, in *ClawbackEventsFromRequest, opts ...grpc.CallOption) (*ClawbackEventsFromResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClawbackEventsFromResponse)
	err := c.cc.Invoke(ctx, EventQuery_ClawbackEventsFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventQueryServer is the server API for EventQuery service.
// All implementations must embed UnimplementedEventQueryServer
// for forward compatibility
type EventQueryServer interface {
	// Event queries event info given event id.
	Event(context.Context, *EventRequest) (*EventResponse, error)
	// ContractEvents queries 10 events that match the given page.
	ContractEvents(context.Context, *ContractEventsRequest) (*ContractEventsResponse, error)
	// ContractEventCount queries number of events that match the given contract
	// id.
	ContractEventCount(context.Context, *ContractEventCountRequest) (*ContractEventCountResponse, error)
	// EventsAtLedger queries all events of contract at specific ledger sequence.
	EventsAtLedger(context.Context, *EventsAtLedgerRequest) (*EventsAtLedgerResponse, error)
	// TransferEvents queries 10 events that match the given contract id and page.
	TransferEvents(context.Context, *TransferEventsRequest) (*TransferEventsResponse, error)
	// TransferEventsFrom queries 10 events that match the given from address and page.
	TransferEventsFrom(context.Context, *TransferEventsFromRequest) (*TransferEventsFromResponse, error)
	// TransferEventsTo queries 10 events that match the given from address and page.
	TransferEventsTo(context.Context, *TransferEventsToRequest) (*TransferEventsToResponse, error)
	// MintEvents queries 10 events that match the given contract id and page.
	MintEvents(context.Context, *MintEventsRequest) (*MintEventsResponse, error)
	// MintEventsAdmin queries 10 events that match the given admin and page.
	MintEventsAdmin(context.Context, *MintEventsAdminRequest) (*MintEventsAdminResponse, error)
	// MintEventsTo queries 10 events that match the given to address and page.
	MintEventsTo(context.Context, *MintEventsToRequest) (*MintEventsToResponse, error)
	// BurnEvents queries 10 events that match the given contract id and page.
	BurnEvents(context.Context, *BurnEventsRequest) (*BurnEventsResponse, error)
	// BurnEventsFrom queries 10 events that match the given from address and page.
	BurnEventsFrom(context.Context, *BurnEventsFromRequest) (*BurnEventsFromResponse, error)
	// ClawbackEvents queries 10 events that match the given contract id and page.
	ClawbackEvents(context.Context, *ClawbackEventsRequest) (*ClawbackEventsResponse, error)
	// ClawbackEventsAdmin queries 10 events that match the given admin address and page.
	ClawbackEventsAdmin(context.Context, *ClawbackEventsAdminRequest) (*ClawbackEventsAdminResponse, error)
	// ClawbackEventsFrom queries 10 events that match the given drom address and page.
	ClawbackEventsFrom(context.Context, *ClawbackEventsFromRequest) (*ClawbackEventsFromResponse, error)
	mustEmbedUnimplementedEventQueryServer()
}

// UnimplementedEventQueryServer must be embedded to have forward compatible implementations.
type UnimplementedEventQueryServer struct {
}

func (UnimplementedEventQueryServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedEventQueryServer) ContractEvents(context.Context, *ContractEventsRequest) (*ContractEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractEvents not implemented")
}
func (UnimplementedEventQueryServer) ContractEventCount(context.Context, *ContractEventCountRequest) (*ContractEventCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractEventCount not implemented")
}
func (UnimplementedEventQueryServer) EventsAtLedger(context.Context, *EventsAtLedgerRequest) (*EventsAtLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventsAtLedger not implemented")
}
func (UnimplementedEventQueryServer) TransferEvents(context.Context, *TransferEventsRequest) (*TransferEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEvents not implemented")
}
func (UnimplementedEventQueryServer) TransferEventsFrom(context.Context, *TransferEventsFromRequest) (*TransferEventsFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEventsFrom not implemented")
}
func (UnimplementedEventQueryServer) TransferEventsTo(context.Context, *TransferEventsToRequest) (*TransferEventsToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEventsTo not implemented")
}
func (UnimplementedEventQueryServer) MintEvents(context.Context, *MintEventsRequest) (*MintEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintEvents not implemented")
}
func (UnimplementedEventQueryServer) MintEventsAdmin(context.Context, *MintEventsAdminRequest) (*MintEventsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintEventsAdmin not implemented")
}
func (UnimplementedEventQueryServer) MintEventsTo(context.Context, *MintEventsToRequest) (*MintEventsToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintEventsTo not implemented")
}
func (UnimplementedEventQueryServer) BurnEvents(context.Context, *BurnEventsRequest) (*BurnEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnEvents not implemented")
}
func (UnimplementedEventQueryServer) BurnEventsFrom(context.Context, *BurnEventsFromRequest) (*BurnEventsFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnEventsFrom not implemented")
}
func (UnimplementedEventQueryServer) ClawbackEvents(context.Context, *ClawbackEventsRequest) (*ClawbackEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClawbackEvents not implemented")
}
func (UnimplementedEventQueryServer) ClawbackEventsAdmin(context.Context, *ClawbackEventsAdminRequest) (*ClawbackEventsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClawbackEventsAdmin not implemented")
}
func (UnimplementedEventQueryServer) ClawbackEventsFrom(context.Context, *ClawbackEventsFromRequest) (*ClawbackEventsFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClawbackEventsFrom not implemented")
}
func (UnimplementedEventQueryServer) mustEmbedUnimplementedEventQueryServer() {}

// UnsafeEventQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventQueryServer will
// result in compilation errors.
type UnsafeEventQueryServer interface {
	mustEmbedUnimplementedEventQueryServer()
}

func RegisterEventQueryServer(s grpc.ServiceRegistrar, srv EventQueryServer) {
	s.RegisterService(&EventQuery_ServiceDesc, srv)
}

func _EventQuery_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_Event_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_ContractEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).ContractEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_ContractEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).ContractEvents(ctx, req.(*ContractEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_ContractEventCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractEventCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).ContractEventCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_ContractEventCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).ContractEventCount(ctx, req.(*ContractEventCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_EventsAtLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsAtLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).EventsAtLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_EventsAtLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).EventsAtLedger(ctx, req.(*EventsAtLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_TransferEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).TransferEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_TransferEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).TransferEvents(ctx, req.(*TransferEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_TransferEventsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEventsFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).TransferEventsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_TransferEventsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).TransferEventsFrom(ctx, req.(*TransferEventsFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_TransferEventsTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEventsToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).TransferEventsTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_TransferEventsTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).TransferEventsTo(ctx, req.(*TransferEventsToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_MintEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).MintEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_MintEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).MintEvents(ctx, req.(*MintEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_MintEventsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintEventsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).MintEventsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_MintEventsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).MintEventsAdmin(ctx, req.(*MintEventsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_MintEventsTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintEventsToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).MintEventsTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_MintEventsTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).MintEventsTo(ctx, req.(*MintEventsToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_BurnEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).BurnEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_BurnEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).BurnEvents(ctx, req.(*BurnEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_BurnEventsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnEventsFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).BurnEventsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_BurnEventsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).BurnEventsFrom(ctx, req.(*BurnEventsFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_ClawbackEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClawbackEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).ClawbackEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_ClawbackEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).ClawbackEvents(ctx, req.(*ClawbackEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_ClawbackEventsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClawbackEventsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).ClawbackEventsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_ClawbackEventsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).ClawbackEventsAdmin(ctx, req.(*ClawbackEventsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_ClawbackEventsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClawbackEventsFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).ClawbackEventsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQuery_ClawbackEventsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).ClawbackEventsFrom(ctx, req.(*ClawbackEventsFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventQuery_ServiceDesc is the grpc.ServiceDesc for EventQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventQuery",
	HandlerType: (*EventQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _EventQuery_Event_Handler,
		},
		{
			MethodName: "ContractEvents",
			Handler:    _EventQuery_ContractEvents_Handler,
		},
		{
			MethodName: "ContractEventCount",
			Handler:    _EventQuery_ContractEventCount_Handler,
		},
		{
			MethodName: "EventsAtLedger",
			Handler:    _EventQuery_EventsAtLedger_Handler,
		},
		{
			MethodName: "TransferEvents",
			Handler:    _EventQuery_TransferEvents_Handler,
		},
		{
			MethodName: "TransferEventsFrom",
			Handler:    _EventQuery_TransferEventsFrom_Handler,
		},
		{
			MethodName: "TransferEventsTo",
			Handler:    _EventQuery_TransferEventsTo_Handler,
		},
		{
			MethodName: "MintEvents",
			Handler:    _EventQuery_MintEvents_Handler,
		},
		{
			MethodName: "MintEventsAdmin",
			Handler:    _EventQuery_MintEventsAdmin_Handler,
		},
		{
			MethodName: "MintEventsTo",
			Handler:    _EventQuery_MintEventsTo_Handler,
		},
		{
			MethodName: "BurnEvents",
			Handler:    _EventQuery_BurnEvents_Handler,
		},
		{
			MethodName: "BurnEventsFrom",
			Handler:    _EventQuery_BurnEventsFrom_Handler,
		},
		{
			MethodName: "ClawbackEvents",
			Handler:    _EventQuery_ClawbackEvents_Handler,
		},
		{
			MethodName: "ClawbackEventsAdmin",
			Handler:    _EventQuery_ClawbackEventsAdmin_Handler,
		},
		{
			MethodName: "ClawbackEventsFrom",
			Handler:    _EventQuery_ClawbackEventsFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/query.proto",
}
